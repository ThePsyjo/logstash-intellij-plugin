input {
    file {
        type => "firstType"
        path => [ "path/to/first/type"]
        start_position => "beginning"
    }
    file {
        type => "secondType"
        path => [ "path/to/second/type" ]
        start_position => "end"
    }
    file {
        type => "thirdType"
        path => [ "path/to/thirdType" ]
        start_position => "beginning"
    }
}
filter {
    mutate {
        add_field => {
            "fieldOne" => "valueOne"
            "fieldTwo" => bareword
        }
        rename => {"fieldOne" => "fieldThree"}
    }
    if [someField] == "someValue" or [someSecondField] == 24 {
        grok {
            patterns_dir => [ "path/to/patterns"]
            match => {"message" => "%{someRule:someExpectedValue}:%{someRuleTwo:someExpValueTwo}%{someRuleThree:someExpValueThree}%{GREEDYDATA:DATA}"}
        }
        mutate {
            strip => ["someExpectedValue", 21]
            add_field => {
                "firstField" => "firstValue"
                "secondField" => "%{secondComplex}/%{value}"
            }
        }
        if [field] == "value" {
            mutate {
                add_field => {
                    "field" => "%{complex}%{field}"
                }
                remove_field => [ "usefulFieldOne", usefulFieldTwo ]
            }
            date {
                match => [ "dateFiled", "[YY:MM:d .a]" ]
                target => "readyDate"
            }
        } else {
            mutate {
                add_field => {
                    "dateNow" => "%{+YYYY-MM-dd}%{log_time}"
                }
                remove_field => [ "useful3", "useful4" ]
            }
            date {
                match => [ "dateExp", "YYYY-MM-dd HH:mm:ss:SS" ]
                target => "dateTarg"
            }
        }
    } else {
        grok {
            patterns_dir => [ "path/to/patterns"]
            match => {"message" => "%{somePattern:someField}%{somePattrn2:someField2}"}
        }
        mutate {
            strip => ["longField"]
            add_field => {
                "first" => firstValue
                "secondField" => "secondValue"
                "thirdField" => "%{+YYYY}/%{myField}"
                "fourField" => 4
            }
            remove_field => [ "usefulField" ]
        }
        if [field] == 21 {
            date {
                match => [ "date", "YYYY:dd:MMH.H:mm:ss.SS" ]
                target => "date"
            }
        } else {
            date {
                match => [ "date", "YYYY:dd:MM.HH:mm:ss.SSS" ]
                target => "date"
            }
        }
    }
    ruby {
        code => " event.set('date', event.get('date').time.strftime('%Y-%m-%d %H:%M:%S.%L')) "
    }
}
output {
    elasticsearch { hosts => ["https://127.0.0.1:9200"] }
}