plugins {
    id 'java'
    id 'org.jetbrains.intellij' version '0.4.8'
    id "org.jetbrains.grammarkit" version "2018.3"
}

group 'com.github.redfoos'
version '1.0-SNAPSHOT'

sourceCompatibility = JavaVersion.VERSION_1_8

repositories {
    mavenCentral()
    mavenLocal()
}

apply plugin: 'java'
apply plugin: 'idea'
apply plugin: 'jacoco'
apply plugin: 'org.jetbrains.intellij'
apply plugin: 'org.jetbrains.grammarkit'

def ideaVersionExternDefinition = System.getenv("IDEA_VERSION")
ideaVersion = ideaVersionExternDefinition ? ideaVersionExternDefinition : ideaVersion
def isEAP = ideaVersion.contains("LATEST-EAP-SNAPSHOT") || ideaVersion.take(4).contains(".")
def artifactVersion = pluginVersion + "-" + (isEAP ? "EAP" : ideaVersion)

println "IdeaVersion is : ${ideaVersion}"
println "ArtifactVersion is : ${artifactVersion}"

dependencies {
    testCompile group: 'junit', name: 'junit', version: '4.12'
}

sourceSets {
    main {
        java.srcDirs 'src', 'gen'
        resources.srcDirs 'resources'
    }
    test {
        java.srcDirs 'tests'
        resources.srcDirs 'testData'
    }
}

intellij {
    pluginName pluginName
    version ideaVersion
    println "Building for IntelliJ version: ${version}"
    sandboxDirectory = "${rootProject.projectDir}/idea-sandbox/idea-${ideaVersion}"
//    plugins 'coverage'
}

task generateLogstashConfigParser(type: org.jetbrains.grammarkit.tasks.GenerateParser) {
    println "Generating Parser for GrammerKit: ${grammarKit.grammarKitRelease}"

    source "grammar/Logstash.bnf"
    targetRoot = "gen"
    pathToParser "com/github/redfoos/logstash/LogstashParser.java"
    pathToPsiRoot "com/github/redfoos/logstash/psi"
}

task generateLogstashConfigLexer(type: org.jetbrains.grammarkit.tasks.GenerateLexer) {
    dependsOn generateLogstashConfigParser
    println "Generating Lexer for JFlexRelease: ${grammarKit.jflexRelease}"

    source = "grammar/Logstash.flex"
    targetDir = "gen/com/github/redfoos/logstash"
    targetClass = "LogstashLexer"
}

jacocoTestReport {
    sourceSets sourceSets.main
    reports {
        xml.enabled = true
        html.enabled = true
    }
}

publishPlugin {
    token System.getenv('IJ_REPO_TOKEN')
}

compileJava.dependsOn generateLogstashConfigLexer
check.dependsOn jacocoTestReport

clean.doFirst {
    delete 'gen', 'out'
}

patchPluginXml {
    version artifactVersion
    // use open until build for last release and EAP-Build

    test {
        // show standard out and standard error of the test JVM(s) on the console
        testLogging.showStandardStreams = true

        // listen to events in the test execution lifecycle
        beforeTest { descriptor ->
            logger.lifecycle("Running test: " + descriptor)
        }
    }

}