{
 parserClass="com.github.redfoos.logstash.LogstashParser"



 extends="com.intellij.extapi.psi.ASTWrapperPsiElement"

 psiClassPrefix="Logstash"
 psiImplClassSuffix="Impl"
 psiPackage="com.github.redfoos.logstash.psi"
 psiImplPackage="com.github.redfoos.logstash.psi.impl"
 elementTypeHolderClass="com.github.redfoos.logstash.psi.LogstashTypes"
 elementTypeClass="com.github.redfoos.logstash.psi.LogstashElementType"
 tokenTypeClass="com.github.redfoos.logstash.psi.LogstashTokenType"

tokens= [
    NEWLINE='regexp:(\R( \t)*)'
    WHITE_SPACE='regexp:[ \t\x0B\f]+'
    SINGLE_QUOTE="'"
    IDENTIFIER='regexp:[a-zA-Z][a-zA-Z0-9_]*'
    NUMBER='regexp:-?[0-9]+(.[0-9]+)?'
    BAREWORD='regexp:([A-Za-z_] [A-Za-z0-9_]+)'
    STRING="regexp:('([^'\\]|\\.)*'|\"([^\"\\]|\\.)*\")"

    LBRACE='{'
    RBRACE='}'
    RIGHTARROW='=>'
    LBRACKET='['
    RBRACKET=']'
    COMMA=','
    AND='and'
    IN='in'
    NOT='not'
    OR='or'
    XOR='xor'
    NAND='nand'
    EQUAL='=='
    NEQUAL='!='
    LESS_OR_EQUAL='<='
    MORE_OR_EQUAL='>='
    LESS='<'
    MORE='>'
    REGEXPEQUAL='=~'
    REGEXPNEQUAL='!~'
    ELSE='else'
]

}

logstashConfig ::= (element*)

private ident ::= 'regexp:[a-zA-Z][a-zA-Z0-9_]*'

private element ::= COMMENT | plugin_block

plugin_block ::= block_name '{' branch_or_plugin '}' {pin=1}

private branch_or_plugin ::= plugin | branch

plugin ::= ident '{' attributes '}'

private block_name ::= ('input' | 'filter' | 'output')

private attributes ::= ((attribute) (attribute)*)

attribute ::= ident "=>" value

private value ::= plugin | bareword | STRING | number | array | hash

private bareword ::= ident

private number ::= 'regexp:-?[0-9]+(.[0-9]+)?'

private array ::= '[' value (',' value)* ']'

private hash ::= '{' hashentries? '}'

private hashentries ::= hashentry (hashentry)?

private hashentry ::= (number | bareword | STRING) '=>' value

branch ::= if (else_if)* (else)?

if ::= 'if' condition '{' (branch_or_plugin)* '}' {pin=1}

private else_if ::= 'else' if

private else ::= 'else' '{' (branch_or_plugin)* '}'

private condition ::= expression (boolean_operator expression)*

expression ::= '(' condition ')'    |
                negative_expression |
                in_expression       |
                not_in_expression   |
                compare_expression  |
                regexp_expression   |
                rvalue

private negative_expression ::= ('!' '(' condition ')') |
                                ('!' selector)

private in_expression ::= rvalue in_operator rvalue

private not_in_expression ::= rvalue not_in_operator rvalue

private in_operator ::= 'in'

private not_in_operator ::= 'not' 'in'

private rvalue ::= STRING | number | selector | array | method_call | REGEXP

private method_call ::= method '(' ( rvalue (',' rvalue)* )? ')'

private method ::= bareword

private compare_expression ::= rvalue compare_operator rvalue

private compare_operator ::= ('==' | '!=' | '<=' | '>=' | '<' | '>')

private regexp_expression ::= rvalue regexp_operator (STRING | REGEXP)

private regexp_operator ::= ('=~' | '!~')

private boolean_operator ::= ('and' | 'or' | 'xor' | 'nand')

private selector ::= selector_element+

private selector_element ::= '[' 'regexp:[^\],]+' ']'
