{
 parserClass="com.github.redfoos.logstash.LogstashParser"



 extends="com.intellij.extapi.psi.ASTWrapperPsiElement"

 psiClassPrefix="Logstash"
 psiImplClassSuffix="Impl"
 psiPackage="com.github.redfoos.logstash.psi"
 psiImplPackage="com.github.redfoos.logstash.psi.impl"
 elementTypeHolderClass="com.github.redfoos.logstash.psi.LogstashTypes"
 elementTypeClass="com.github.redfoos.logstash.psi.LogstashElementType"
 tokenTypeClass="com.github.redfoos.logstash.psi.LogstashTokenType"

tokens= [
    INPUT_PLUGIN_TYPE='input'
    FILTER_PLUGIN_TYPE='filter'
    OUTPUT_PLUGIN_TYPE='output'
    IF_OPERATOR='if'
    ELSE_OPERATOR='else'
    IN_OPERATOR='in'
    NOT_OPERATOR='not'
    LPARENTH='('
    RPARENTH=')'
    LBRACKET='['
    RBRACKET=']'
    LBRACE='{'
    RBRACE='}'
    RIGHT_ARROW='=>'
    COMMA=','
    EQUALS='=='
    NOT_EQUALS='!='
    LESS_THAN_OR_EQUAL='<='
    GREATER_THAN_OR_EQUAL='>='
    LESS_THAN='<'
    GREATER_THAN='>'
    REGEXP_EQUAL='=~'
    REGEXP_NOT_EQUAL='!~'
    AND_OPERATOR='and'
    OR_OPERATOR='or'
    XOR_OPERATOR='xor'
    NAND_OPERATOR='nand'
    EXCLAMATION_MARK='!'
    WHITE_SPACE='regexp:[ \t\r\n]+'
    DOUBLE_QUOTED_STRING='regexp:\"([^\\\"]|\\.)*\"'
    SINGLE_QUOTED_STRING="regexp:'([^\\']|\\.)*'"
    BAREWORD='regexp:[A-Za-z_][A-Za-z0-9_-]*'
    REGEXP='regexp:/([^\\/]|\\.)*/'
    NUMBER='regexp:-?[0-9]+(\.[0-9]*)?'
//    SELECTOR_ELEMENT_REGEXP='regexp:[^\\]|,+'
]

}



//config ::= plugin_section *
//plugin_section ::= !<<eof>> plugin_type '{' '}' { pin = 1 recoverWhile=plugin_section_recover}
//private plugin_type ::= 'input' | 'filter' | 'output'
//private plugin_section_recover ::= !( 'input' | 'filter' | 'output' |'{' | '}')


config ::= plugin_section *
private plugin_section ::= !<<eof>> plugin_type '{' branch_or_plugin* '}' { pin=1 }
plugin_type ::= 'input' | 'filter' | 'output'
private branch_or_plugin ::= branch | plugin
plugin ::= name_token '{' attributes '}' { pin=2 }
private attributes ::= (attribute (attribute)*)? {pin=1 }
private name_token ::= BAREWORD | string
attribute ::= name_token '=>' value { pin=2 }
value ::= plugin | BAREWORD | string | NUMBER | array | hash
private string ::= DOUBLE_QUOTED_STRING | SINGLE_QUOTED_STRING

//config ::= nilValue pluginSection nilValue ( nilValue pluginSection )* nilValue
//comment ::= ( WHITE_SPACE? '#' END_OF_LINE_COMMENT )+
//nilValue ::= ( comment | WHITE_SPACE )*
//pluginSection ::= pluginType nilValue '{' nilValue (branchOrPlugin nilValue)* '}' { pin=1 recoverWhile=pluginRecover}
//private pluginRecover ::= !('{' | '}')
//branchOrPlugin ::= branch | plugin
//pluginType ::= 'input' | 'filter' | 'output'
//plugin ::= nameToken nilValue '{' nilValue (attribute (WHITE_SPACE nilValue attribute)*)? nilValue '}'
//nameToken ::= NAME_REGEXP | string
//attribute ::= nameToken nilValue '=>' nilValue value
//value ::= plugin | BAREWORD | string | NUMBER | array | hash
//string ::= DOUBLE_QUOTED_STRING | SINGLE_QUOTED_STRING
//array ::= '[' nilValue (value (nilValue ',' nilValue value)*)? nilValue ']' { pin=1 }
//hash ::= '{' nilValue hashEntries? nilValue '}' { pin=1 }
//hashEntries ::= hashEntry ( WHITE_SPACE hashEntry )*
//hashEntry ::= ( NUMBER | BAREWORD | string) nilValue '=>' nilValue value
//branch ::= if (nilValue elseIf )* ( nilValue else )?
//if ::= 'if' nilValue condition nilValue '{' nilValue ( branchOrPlugin nilValue )* '}' { pin=1 }
//elseIf ::= 'else' nilValue 'if' nilValue condition nilValue '{' nilValue ( branchOrPlugin nilValue )* '}' { pin=1 }
//else ::= 'else' nilValue '{' nilValue ( branchOrPlugin nilValue )* '}'
//condition ::= expression ( nilValue booleanOperator nilValue expression )*
//expression ::= ('(' nilValue condition nilValue ')') | negativeExpression | inExpression | notInExpression | compareExpression | regexpExpression | rValue
//negativeExpression ::= ('!' nilValue '(' condition nilValue ')') | ('!' nilValue selector)
//inExpression ::= rValue nilValue 'in' nilValue rValue
//notInExpression ::= rValue nilValue notInOperator nilValue rValue
//notInOperator ::= 'not' nilValue 'in' { pin=1 }
//rValue ::= string | NUMBER | selector | array | methodCall | REGEXP
//methodCall ::= method nilValue '(' nilValue (rValue (nilValue ',' nilValue rValue)*)? nilValue ')'
//method ::= BAREWORD
//compareExpression ::= ('==' | '!=' | '<=' | '>=' | '<' | '>')
//regexpExpression ::= rValue nilValue regexpOperator nilValue (string | REGEXP)
//regexpOperator ::= ('=~' | '!~')
//booleanOperator ::= ('and' | 'or' | 'xor' | 'nand')
//selector ::= selectorElement+
//selectorElement ::= '[' SELECTOR_ELEMENT_REGEXP ']'
