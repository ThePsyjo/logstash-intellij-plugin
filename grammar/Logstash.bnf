{
 parserClass="com.github.redfoos.logstash.LogstashParser"



 extends="com.intellij.extapi.psi.ASTWrapperPsiElement"

 psiClassPrefix="Logstash"
 psiImplClassSuffix="Impl"
 psiPackage="com.github.redfoos.logstash.psi"
 psiImplPackage="com.github.redfoos.logstash.psi.impl"
 elementTypeHolderClass="com.github.redfoos.logstash.psi.LogstashTypes"
 elementTypeClass="com.github.redfoos.logstash.psi.LogstashElementType"
 tokenTypeClass="com.github.redfoos.logstash.psi.LogstashTokenType"

tokens= [
    IF_TOK='if'
    ELSE_TOK='else'
    SINGLE_QUOTE="'"
    LBRACE='{'
    RBRACE='}'
    RIGHTARROW='=>'
    LBRACKET='['
    RBRACKET=']'
    LPARENTH='('
    RPARENTH=')'
    COMMA=','
    EQUAL='=='
    NEQUAL='!='
    LESS_OR_EQUAL='<='
    MORE_OR_EQUAL='>='
    LESS='<'
    MORE='>'
    REGEXPEQUAL='=~'
    REGEXPNEQUAL='!~'
    LOGICAL_NOT='!'
]

}

logstashConfig ::= element (element)*

private element ::= COMMENT | plugin_block

plugin_block ::= block_name '{' (branch_or_plugin)* '}' {pin=1}

private branch_or_plugin ::= plugin | branch

plugin ::= IDENTIFIER '{' attributes '}'

private block_name ::= ('input' | 'filter' | 'output')

private attributes ::= (attribute (attribute)*)?

attribute ::= IDENTIFIER "=>" value

private value ::= plugin | bareword | STRING | NUMBER | array | hash

private bareword ::= IDENTIFIER

private array ::= '[' value (',' value)* ']'

private hash ::= '{' hashentries? '}'

private hashentries ::= hashentry (hashentry)*

private hashentry ::= (NUMBER | bareword | STRING) '=>' value

branch ::= if (else_if)* (else)?

// it's better to use most general 'expression' here. In future you may write an inspection that reports if-statements with non-boolean expressions
private if ::= 'if' expression '{' (branch_or_plugin)* '}' {pin=1} // it's necessary to quote 'if' token because there is a rule with the same name

private else_if ::= 'else' 'if' expression '{' (branch_or_plugin)* '}'

private else ::= 'else' '{' (branch_or_plugin)* '}'

;{
  extends(".*_expression")=expression // !!! see https://github.com/JetBrains/Grammar-Kit/blob/master/HOWTO.md#24-compact-expression-parsing-with-priorities
}


// todo: check operators priority
expression ::=
   in_expression
   | compare_expression
   | logical_expression
   | regexp_expression
   | unary_group
   | primary_group

compare_expression ::= expression ('==' | '!=' | '<=' | '>=' | '<' | '>') expression

logical_expression ::= expression (and | or | xor | nand) expression

private unary_group ::= unary_negation_expression
unary_negation_expression ::= '!' expression

in_expression ::= expression (in | not in) expression // it's better to inline tiny private rules that are used only ones

private method_call ::= bareword '(' ( expression (',' expression)* )? ')'

private primary_group ::= paren_expression
  | literal_expression
paren_expression ::= '(' expression ')'
literal_expression ::= STRING | NUMBER | selector | array | method_call | REGEXP
private selector ::= selector_element+
private selector_element ::= '[' 'regexp:[^\],]+' ']' // todo: move regexp to lexer

regexp_expression ::= expression ('=~' | '!~') (STRING | REGEXP)
